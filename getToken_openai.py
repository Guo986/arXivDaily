# 这是 openai 的 token 计算方法， deepseek 与之不同
import tiktoken
def prompt2tokenNum(prompt):
    enc = tiktoken.get_encoding("o200k_base")
    encoder = enc.encode(prompt)
    return len(encoder)
q = "  Lindahl equilibrium is a solution concept for allocating a fixed budget\nacross several divisible public goods. It always lies in the core, meaning that\nthe equilibrium allocation satisfies desirable stability and proportional\nfairness properties. We consider a model where agents have separable linear\nutility functions over the public goods, and the output assigns to each good an\namount of spending, summing to at most the available budget.\n  In the uncapped setting, each of the public goods can absorb any amount of\nfunding. In this case, it is known that Lindahl equilibrium is equivalent to\nmaximizing Nash social welfare, and this allocation can be computed by a\npublic-goods variant of the proportional response dynamics. We introduce a new\nconvex programming formulation for computing this solution and show that it is\nrelated to Nash welfare maximization through duality and reformulation. We then\nshow that the proportional response dynamics is equivalent to running mirror\ndescent on our new formulation, thereby providing a new and immediate proof of\nthe convergence guarantee for the dynamics. Our new formulation has\nsimilarities to Shmyrev's convex program for Fisher market equilibrium.\n  In the capped setting, each public good has an upper bound on the amount of\nfunding it can receive. In this setting, existence of Lindahl equilibrium was\nonly known via fixed-point arguments. The existence of an efficient algorithm\ncomputing one has been a long-standing open question. We prove that our new\nconvex program continues to work when the cap constraints are added, and its\noptimal solutions are Lindahl equilibria. Thus, we establish that Lindahl\nequilibrium can be efficiently computed in the capped setting. Our result also\nimplies that approximately core-stable allocations can be efficiently computed\nfor the class of separable piecewise-linear concave (SPLC) utilities.\n"
print('words =', len(q.split(' ')))
print('token =', prompt2tokenNum(q))